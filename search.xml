<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CSS盒模型]]></title>
    <url>%2F2018%2F07%2F22%2FCSS%E7%9B%92%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[MDN教程： https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model 请先看完MDN的教程 CSS盒模型CSS盒模型的组成部分： margin + border + padding + content; 两种盒模型盒模型分两种：标准盒模型和怪异盒模型。他们之间的区别为： 标准盒模型： width/height = content怪异盒模型： width/height = border + padding + content CSS3新增了一个属性可控制元素的盒模型类型：box-sizing: content-box(标准盒模型); border-box(怪异盒模型) 区分盒模型类型的作用？假设，你给一个div设置了如下的CSS属性, 注意：它的背景色为“红色”12345678.div &#123; width: 100px; height: 100px; margin: 20px; padding: 30px; border: 10px solid 10red; background-color: red;&#125; 如果是标准盒模型，你最终看到的红色块的高宽都为100px; 如果是怪异盒模型，你最终看到的红色块的高宽都为100 - 30 * 2 - 10 * 2 = 20px; 现在你明白区别了吧！盒模型的不同，直接影响的就是content的高宽，而content才是具体展示一个div内部信息的关键部分。至于其它三个：margin，是用来扩展多个元素之间的间距的；padding是用来扩展父元素与其内部子元素(或者该父元素内部数据)的距离的；border则是来限制一个元素的定位边界的。 盒模型与position: absolute定位请看如下代码, 大家思考下，.child的div最后的位置是在紧挨.par的左上角上下各20px的地方，还是其他地方？12345678910111213141516171819202122// html&lt;div class=&quot;par&quot;&gt; &lt;div class=&quot;child&quot;&gt; &lt;/div&gt;&lt;/div&gt;// css.par &#123; position: relative; width: 100px; height: 100px; padding: 20px; border: solid 10px red;&#125;.child &#123; position: absolute; top: 0; left: 0; width: 20px; height: 20px; background-color: blue;&#125; 公布答案： 有人可能有疑问？为什么不是这一种？(因为.par有padding: 20px的属性值啊) 其实不用疑虑，这个就是CSS的绝对定位的原理性知识了，绝对定位是基于它定位的那个祖先元素的border内部边缘处开始定位的，也就是说，就算你给.par设置了内边距padding, 也无法改变它的子元素.child定位的初始位置 那，这里的定位知识，区分盒模型的类型吗？答案是：不区分！ 盒模型与子元素width: 100%的计算准则请看如下代码, 大家思考下，.child的宽高最终是多少？1234567891011121314151617// html&lt;div class=&quot;par&quot;&gt; &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;&lt;/div&gt;// css.par &#123; width: 100px; height: 100px; padding: 20px; border: solid 10px red;&#125;.child &#123; width: 100%; height: 100%; background-color: blue;&#125; 公布答案： 这里就要区分盒模型类型了. 如果.par是标准盒模型，.child的高宽为100px；如果.par是怪异盒模型，.child的高宽为20px； 原理为：子元素的宽度计算依据的是父元素content的高宽]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS属性继承]]></title>
    <url>%2F2018%2F07%2F19%2FCSS%E5%B1%9E%E6%80%A7%E7%BB%A7%E6%89%BF%2F</url>
    <content type="text"><![CDATA[CSS 继承MDN 的教程：https://developer.mozilla.org/zh-CN/docs/Web/CSS/inheritance 什么是继承呢？ 一个子元素可以从祖先元素继承“可继承属性”的计算值。 可以对比Java的继承来理解，子类的实例调用某方法show()时，如果子类中不存在，则会调用父类中的show()方法，如果父类中也没有，则调用父类的父类中的show()方法，这样依次查找，直到顶端。 举个栗子： 123456789101112131415&lt;div class=&quot;par1&quot;&gt; 1 &lt;div class=&quot;par2&quot;&gt; 2 &lt;div class=&quot;par3&quot;&gt;3&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;// css.par1 &#123; font-size: 20px;&#125;.par2 &#123; color: red;&#125; 实测发现，2，3的字体颜色都为红色了而且字体大小都是20px，但是par3本身并没有声明这些属性值。 形成这个现象的的原理，就是“CSS属性的继承”的特性。color值继承自par2, font-size的值继承自par1 并不是所有的CSS属性都是可以继承的，或者说是自动继承 12345678910111213141516171819202122 &lt;div class=&quot;par1&quot;&gt; 1 &lt;div class=&quot;par2&quot; id=&quot;par2&quot;&gt; 2 &lt;/div&gt; &lt;/div&gt;&lt;style&gt; .par1 &#123; display: inline-block; font-size: 20px; &#125; .par2 &#123; color: red; &#125;&lt;/style&gt;&lt;script&gt;const par2 = document.getElementById(&apos;par2&apos;);const style2 = window.getComputedStyle(par2);console.log(style2.display); // block&lt;/script&gt; window.getComputedStye() ,这个方法可以获取某个元素“计算后的CSS属性”。 为什么par2的display是block， 而不是inline-block呢？par2的display的属性值为“block”，但是其父元素par1是”inline-block”。 形成这种现象的原理是“display为非自动继承的属性值”。 如何让par2的display的值，随par1的值自动变化(也可以是继承自par1)呢?代码如下:123.par2 &#123; display: inherit;&#125; 此时， console.log(style2.display); 的输出值就是”inline-block”了。 CSS能自动继承的属性border-collapseborder-spacingcolorcursordirectionempty-cellsfont(-style | - variant | -weight | -size | -family | -stretch | -size | -adjust)letter-spacingline-heightlist-style(-image | -position | -type)overflow-wrappointer-eventsquotestext-indent 缩进text-size-adjusttext-underline-positiontext-shadowtext-aligntext-align-lasttext-justifytest-transformtab-sizetable-layoutwhite-spaceword-breakword-wrapword-spacingwriting-modevisibilityzoom]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS选择器的优先级]]></title>
    <url>%2F2018%2F07%2F15%2FCSS%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7%2F</url>
    <content type="text"><![CDATA[测试环境： safari 11.01 、Chrome 67 、Firefox 61 MDN上关于CSS选择器优先级的介绍https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity ID、class、元素 、属性优先级排名为： ID[属性][伪类] ID[属性] –或– ID[伪类]; 看声明顺序, 后声明的优先级更大 ID class[属性][伪类] 元素[属性][伪类] class[伪类] –或– class[属性]; 看声明顺序，后声明的优先级更大 元素[伪类] –或– 元素[属性]; 看声明顺序，后声明的优先级更大 class 元素 Chrome的实测图 为了便于记忆，我总结了如下规律，将它们转化为数字的加法 ID – 1000 class – 450 元素 – 400 属性 – 100 伪类 – 100 最后，就可以将之转化为如下的数字，以后也不用单独去记忆，用的时候做做加法就行了。 ID[属性][伪类]； 1000 + 100 + 100 = 1200 ID[属性] –或– ID[伪类]; 看声明顺序, 后声明的优先级更大 ； 1000 + 100 = 1100； ID ；1000 class[属性][伪类]；450 + 100 + 100 = 650 元素[属性][伪类]；400 + 100 + 100 = 600； class[伪类] –或– class[属性]; 看声明顺序，后声明的优先级更大；450 + 100 = 450； 元素[伪类] –或– 元素[属性]; 看声明顺序，后声明的优先级更大；400 + 100 = 500； class；450 元素；400 ID、class、元素 混用如果是 元素[class]，也就是ID、class、元素混用的情况，这样的选择器的优先级在哪儿呢？ 这里我不做研究，因为这个代码写出来后你会发现上面的公式乱掉了，我个人是会尽量避免这种写法的。 这种写法不仅仅让优先级难以捉摸，更让代码不好维护。假若某件维护人修改了HTML代码，但是他并不知道CSS需要修改，就会形成BUG。见下面这个例子123&lt;input type=&quot;text&quot; class=&quot;test&quot;&gt;input.test &#123;&#125; 修改为123&lt;select class=&quot;test&quot;&gt;&lt;/select&gt;input.test &#123;&#125; // 这里会形成BUG 如果大家工作有必须有混用的情况，可以基于我的研究之上，再进行研究总结。也可以给我发邮件，我们一起探讨下。 “+”，“~”，“&gt;”，“ ”，“” 选择器的应用“+”，“~”。优先级看顺序，后声明的优先级更大 综合后的优先级为 ID+ID ID[属性] class + ID 或 ID + class ; 看声明顺序 ID class[属性] class+class 元素[属性] class 元素 其实还有更复杂的，那就是 ID + ID[属性]、ID + ID[属性][伪类]。再这样研究下去怕是乱成一团了。 当我们想要刻意去使用优先级来维持好网页表现时，就不应该搞得过于复杂，太复杂的代码真的很容易出BUG. “&gt;”, “ “ 与 “+”, “~” 同时使用时优先级为: ID + ID ID ID ID[属性] class + ID 或 ID + class; 看声明的顺序 class ID) || (ID class ID 元素 ID class[属性] class + class class class 元素[属性] class 元素 class 元素 可以看到，这里已经很复杂了，如果我们再把伪类加上去，把“&gt;”选择器加上去，会如何呢？？ 我感觉会炸，这么复杂的优先级，单单记住都已经很难了，如果再将之应用于产品中，代码会变了不好维护和迭代了。我选择不用，所以后续的也不做研究了。 感想平时我们书写CSS代码时，以我为例，常用的选择器是：class、后代、子代、伪类。ID选择器用的都很少，一般只会用来做做鼻祖元素]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS知识点总结]]></title>
    <url>%2F2018%2F07%2F12%2Fcss%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[基本知识点关键概念 语言语法和形式 CSS选择器的优先级 继承 盒模型(Box model) 外边距合并(margin collapse) 堆叠(Stacking) 格式化上下文（block-formatting contexts） 初始值、计算值、应用值和当前值 CSS简写属性 （CSS shorthand properties） CSS弹性盒子 （CSS Flexible Box Layout） CSS网格布局 （Grid Layout） 媒体查询]]></content>
      <categories>
        <category>总结</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSS总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[overflow影响了safari中fixed定位的表现形式]]></title>
    <url>%2F2018%2F05%2F17%2Fsafari%2F</url>
    <content type="text"><![CDATA[先上代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;/&gt; &lt;/head&gt; &lt;style&gt; * &#123; box-sizing: border-box; &#125; html, body &#123; margin: 0; padding: 0; background-color: gray; &#125; .app &#123; position: relative; width: 100%; height: 100%; padding-bottom: 40px; overflow: hidden; &#125; .attend-course-list &#123; position: relative; z-index: 3 !important; height: 100%; overflow-y: auto; overflow-x: hidden; &#125; .weui-actionsheet &#123; position: fixed; left: 0; bottom: 0; transform: translate(0, 0); backface-visibility: hidden; z-index: 5000; width: 100%; transition: transform .3s, -webkit-transform .3s; background-color: #EFEFF4; &#125; .weui-actionsheet__menu &#123; height: 400px; background-color: #fff; &#125; .weui-actionsheet__action &#123; margin-top: 6px; background-color: #fff; &#125; .weui-actionsheet__cell &#123; position: relative; padding: 10px 0; text-align: center; font-size: 18px; &#125; .weui-actionsheet__cell:before &#123; content: &quot; &quot;; position: absolute; left: 0; top: 0; right: 0; height: 1px; border-top: 1px solid #D9D9D9; color: #D9D9D9; -webkit-transform-origin: 0 0; transform-origin: 0 0; -webkit-transform: scaleY(0.5); transform: scaleY(0.5); &#125; .weui-tabbar &#123; position: absolute; left: 0; right: 0; bottom: 0; z-index: 500; width: 100%; height: 50px; background-color: #12bcfc; &#125; &lt;/style&gt; &lt;body&gt; &lt;div class=&quot;app&quot;&gt; &lt;div class=&quot;attend-course-list&quot;&gt; &lt;div class=&quot;mobile-scroll&quot;&gt; &lt;div&gt;这里是数据列表块&lt;/div&gt; &lt;div class=&quot;vux-actionsheet&quot; close-on-clicking-menu=&quot;true&quot;&gt; &lt;div class=&quot;weui-actionsheet weui-actionsheet_toggle&quot;&gt; &lt;div class=&quot;weui-actionsheet__menu&quot;&gt; 这里是上拉菜单块 &lt;/div&gt; &lt;div class=&quot;weui-actionsheet__action&quot;&gt; &lt;div class=&quot;weui-actionsheet__cell&quot;&gt;取消&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;weui-tabbar&quot;&gt;这里是底部menu块&lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 分析A - “attend-course-list”(z-index：2)，它有一个后代元素C(z-index： 5000) B - “weui-tabbar”（z-index：3） A 和 B是兄弟元素，他们之间的z-index谁更大谁就在上面，这一点chrome和safari表现的是一样的 Chrome和 Safari中都具有的表现首先，fixed定位时根据viewport来定位的（除非祖先元素中有transform为非none的），肯定跟祖先元素无关，但是计算z-index的时候，C的z-index计算方式不能和A的同等来计算，C的z-index虽然是5000，实际计算为2.5000(A是2)，而B的z-index是3，所以C就算是fixed定位了也不能覆盖住B 对于overflow，Safari的表现：如果A有了overflow(-y / -x)的属性值，C超出了A的高宽范围外的部分会被隐藏 对于overflow，Chrome的表现：如果A有了overflow(-y / -x)的属性值，C也不会管，C超出了A的高宽范围外的部分不会被隐藏]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>浏览器兼容性</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo搜索功能添加]]></title>
    <url>%2F2018%2F03%2F04%2Fhexo%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD%E6%B7%BB%E5%8A%A0%2F</url>
    <content type="text"><![CDATA[教程 安装搜索插件hexo-generator-searchdb ：npm install hexo-generator-searchdb –save 在你的根目录的_config.yml中添加 12345search: path: search.xml field: post format: html limit: 10000 在你的主题(我使用的是next)的_config.yml中，将 123456local_search: enable: false修改为：local_search: enable: true]]></content>
  </entry>
  <entry>
    <title><![CDATA[Object.defineProperty]]></title>
    <url>%2F2018%2F03%2F04%2FObject.defineProperty%E7%9A%84%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Object.defineProperty的用法？其中的set和get的作用? 作用: 直接在一个对象上定义新属性，或者修改一个现有的属性，并会返回该对象。[Object.defineProperty(object, prop, descriptor)] descriptor(属性描述符): 分为数据描述符和存取描述符，两者取其一 数据描述符是一个具有值的属性 存取描述符是有getter-setter函数对，描述的属性 它们具有以下可选健值 configurable：为true时，属性值可被改变，以及除writable特性外的其他特性是否可以被修改，默认为false enumerable：为true时，属性才能出现在对象的枚举属性中(for…in循环和Object.keys()中杯枚举)。默认为false 数据描述符特有的可选健值: value：属性对象的值，可是任何JS值，默认为undefined writable：为true时，value才能被赋值运算符改变，默认为false 存取描述符特有的健值： get：给属性提供getter方法，如果没有getter则为undefined。该方法返回值被用作属性值，默认为undefined set： 给属性提供setter的方法，如果没有seeter则为undefined。该方法接受唯一参数，并将该参数的新值分配给该属性。默认为undefined 描述符可同时具有的健值 分类 configurable enumerable value writable get set 数据描述符 Yes Yes Yes Yes No No 存取描述符 Yes Yes No No Yes Yes 如果一个描述符不具有value，writable，get和set任意一个关键字，那么它将被认为是一个数据描述符。如果一个描述符同时有(value或writable)和(get或set)关键字，将会产生一个异常 set和get的作用? 1234567891011121314151617181920212223function Archiver() &#123; var temperature = null; var archive = []; Object.defineProperty(this, &apos;temperature&apos;, &#123; get: function() &#123; console.log(&apos;get!&apos;); return temperature; &#125;, set: function() &#123; trmperature = value; archive.push(&#123;val: temperature&#125;); &#125; &#125;); this.getArchive = function() &#123; return archive; &#125;&#125;var arc = new Archiver();arc.temperature; // 打印出&apos;get!&apos;arc.temperature = 11;arc.temperature = 13;arc.getArchive(); // [&#123;val:11&#125;, &#123;val: 13&#125;]]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>每日N问吾身</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[跨域的处理方式]]></title>
    <url>%2F2018%2F03%2F04%2F%E8%B7%A8%E5%9F%9F%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[跨域的原理？解决方式有哪些吗？ 如果两个页面的‘协议’，‘端口’，‘域名’三者任一不同时，便是跨域了。 解决方式： JSONP: 新增了script标签，通过get的方式发起请求并且将数据通过制定的回调函数传回来 CORS: (Cross-Origin Resource Sharing),此规范是针对于API容器的，以减轻跨域HTTP请求的风险。需要后台服务器在请求的response中添加Access-Control-Allow-Origin，*代表所有，也可以指定某个或某些网站 CORS使用场景: 使用 XMLHttpRequest 或 Fetch发起跨站 HTTP 请求。 Web 字体 (CSS 中通过 @font-face 使用跨站字体资源)，因此，网站就可以发布 TrueType 字体资源，并只允许已授权网站进行跨站调用。 WebGL 贴图 使用drawImage绘制 Images/video 画面到canvas. 样式表（使用 CSSOM） Scripts (for unmuted exceptions)]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>每日N问吾身</tag>
        <tag>JavaScript</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS的数据类型]]></title>
    <url>%2F2018%2F03%2F01%2FJS%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[JS的基本数据类型有哪些?常用的引用类型有哪些？(为了能够更好的处理各种业务场景时对数据类型的选择) null, undefined, boolean, string, number Object, Array, Date, JSON Object: 1. toString 2. hasOwnProperty: 查找是否有此属性值 3. defineProperties: 用来给对象新增属性值 Array: 1. 增: push, unshift 2. 删: pop, shift, splice 3. 改: fill, splice, 4. 查: find, findIndex, entries, every, includes, indexOf, lastIndexOf, filter 5. 迭代器相关: entries, keys, values 5. 其它：concat(连接), copyWithin(拷贝数组一部分到数组内的某个位置去), forEach(循环), map(循环，并返回一个新数组), join(将数组拼凑成字符串), reduce(从左到右累加), reduceRight(从右到左累加),sort(排序),some(测试是否元素通过),from(从其它数据中生成一个新数组),isArray(判断是否是一个数组) Date: 用的较少，暂时不大总结 1. now: 获取当前时间 2. getDate: 获取日期是月份中的第几天 3. getDay: 获取日期是一周中的第几天,0表示星期天 4. getFullYear: 返回年份 5. getHours: 获取小时 6. getMilliseconds: 获取毫秒数 7. getMinutes: 获取分钟数 8. getMonth: 获取月份，0表示1月份 9. getSeconds: 获取秒数 10. getTime: 获取毫秒数 JSON: 1. parse： 将JSON字符串转化为JS对象，或者将基本数据进行转化 2. stringify: 将一个JS对象或数组转化为JSON字符串]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>每日N问吾身</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS数据去重]]></title>
    <url>%2F2018%2F03%2F01%2F%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%2F</url>
    <content type="text"><![CDATA[我用过的数组去重的方式有哪些？答： 利用Set: 1234var a = [1,2,3,4,6], b = [1,4,5,6,7,8];var set = new Set(a.concat(b));// 或者 var set = new Set(a.concat(b));console.log(...set); 时间复杂度M+N 12345678910111213var a = [1,2,3,4,6], b = [1,4,5,6,7,8];var obj = &#123;&#125;;for(var i = 0; i &lt; a.length; i++) &#123; var temp = a[i]; obj[temp] = true;&#125;for(var j = 0; j &lt; b.length; j++) &#123; var temp = b[j]; if(!(obj[temp])) &#123; a.push(temp); &#125;&#125;console.log(a); 时间复杂度M or N 123456789var a = [1,2,3,4,6], b = [1,4,5,6,7,8];var newArr = b.slice(0);for(var j = 0; j &lt; a.length; j++) &#123; const temp = a[i]; if(newArr.indexOf(temp) &lt; 0) &#123; newArr.push(temp); &#125;&#125; 123456789var a = [1,2,3,4,6], b = [1,4,5,6,7,8];var newArr = a.slice(0);for(var j = 0; j &lt; b.length; j++) &#123; const temp = b[j]; if(newArr.indexOf(temp) &lt; 0) &#123; newArr.push(temp); &#125;&#125;]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>每日N问吾身</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[yield与return]]></title>
    <url>%2F2018%2F03%2F01%2Fyield%E4%B8%8Ereturn%2F</url>
    <content type="text"><![CDATA[###如果把yield和return一起使用，当return在下一个yield之前，会如何？一行之中多个yield会如何？ 下一个yield不会执行，会返回 {value: ‘return的值’, done: true} 多个yield一行中连用时，会如正常yield一样运行，只不过后面next的返回的value为undefined]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>每日N问吾身</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[absolute定位后，元素高宽]]></title>
    <url>%2F2018%2F02%2F28%2Fabsolute%E5%AE%9A%E4%BD%8D%E5%90%8E%E5%85%83%E7%B4%A0%E7%9A%84%E5%AE%BD%E9%AB%98%2F</url>
    <content type="text"><![CDATA[当元素absolute定位后，他的高宽默认为多少？设置width: 100%;height:100%后，宽度会如何计算? 会忽略padding，margin吗？1. 如果不写width, height，他们的值都为0； 2. 设置width: 100%; height: 100%; 后，他们的值会继承自它相对于定位的那个祖先元素 3. margin，padding仍然是有效的]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>每日N问吾身</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[overflow能清除浮动?]]></title>
    <url>%2F2018%2F02%2F28%2Foverflow%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[为什么overflow: hidden; 能清除浮动？overflow: hidden后，元素的box-shadow还存在吗？visibility: hidden;1. 在没有明确设定容器高情况下，overflow: hidden;要计算内容全部高度才能确定在什么位置hidden，浮动的高度就要被计算进去，顺带达成了清理浮动的目标 2. box-shadow仍然存在]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>每日N问吾身</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[按钮点击时的阴影]]></title>
    <url>%2F2018%2F02%2F28%2F%E6%8C%89%E9%92%AE%E7%82%B9%E5%87%BB%E6%97%B6%E7%9A%84%E9%98%B4%E5%BD%B1%2F</url>
    <content type="text"><![CDATA[button的四种伪类？如何更改按钮点击时外部出现的阴影？1. :focus, :active, :visited, :hover 2. button:focus { outline: none; }]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>每日N问吾身</tag>
      </tags>
  </entry>
</search>
